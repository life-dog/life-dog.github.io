<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git使用教程</title>
      <link href="/2020/03/07/git-jiao-cheng/"/>
      <url>/2020/03/07/git-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="git教程"><a href="#git教程" class="headerlink" title="git教程"></a>git教程</h1><h2 id="git简介"><a href="#git简介" class="headerlink" title="git简介"></a>git简介</h2><ul><li>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，集中式版本控制系统是必须联网才能工作，如果网速慢的话，上传文件就比较慢。</li><li>Git是分布式版本控制系统，它没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了。</li></ul><h2 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h2><ul><li>git官网：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a></li></ul><h2 id="初始化git仓库"><a href="#初始化git仓库" class="headerlink" title="初始化git仓库"></a>初始化git仓库</h2><ul><li><p>在指定位置新建一个文件夹，右键文件夹点击Git Bash Here</p></li><li><p>命令：<code>git init</code></p></li></ul><h2 id="配置git用户名和邮箱"><a href="#配置git用户名和邮箱" class="headerlink" title="配置git用户名和邮箱"></a>配置git用户名和邮箱</h2><ul><li>配置用户名：<code>git config --global user.name "填写你的名字"</code></li><li>配置邮箱：<code>git config --global user.email "填写你github的邮箱地址"</code></li></ul><h2 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h2><ul><li><p>1.把代码提交到缓冲区</p><pre><code> - `git add ./` 把所有修改的文件都提交到缓冲区</code></pre></li><li><p>2.把缓冲区代码提交到本地仓库</p><pre><code>- `git commit -m "这是对提交代码的描述"`</code></pre></li><li><p>3.把本地仓库的代码提交到线上仓库</p><ul><li><code>git push</code></li></ul></li><li><p>一次性提交修改的代码</p><ul><li><code>git commit --all -m "这是对提交代码的描述"</code></li></ul></li></ul><h2 id="查看代码状态"><a href="#查看代码状态" class="headerlink" title="查看代码状态"></a>查看代码状态</h2><ul><li><p>命令:<code>git status</code></p><p><img src="https://raw.githubusercontent.com/life-dog/blogImgs/master/img/QQ%E5%9B%BE%E7%89%8720170418142000.jpg" alt=""></p></li></ul><h1 id="完整开发流程"><a href="#完整开发流程" class="headerlink" title="完整开发流程"></a>完整开发流程</h1><h2 id="1-安装note-js"><a href="#1-安装note-js" class="headerlink" title="1. 安装note.js"></a>1. 安装note.js</h2><h2 id="2-在GitHub或者Gitee创建仓库"><a href="#2-在GitHub或者Gitee创建仓库" class="headerlink" title="2.在GitHub或者Gitee创建仓库"></a>2.在GitHub或者Gitee创建仓库</h2><h2 id="3-安装Git"><a href="#3-安装Git" class="headerlink" title="3.安装Git"></a>3.安装Git</h2><h2 id="4-本地Git仓库关联线上Git仓库"><a href="#4-本地Git仓库关联线上Git仓库" class="headerlink" title="4.本地Git仓库关联线上Git仓库"></a>4.本地Git仓库关联线上Git仓库</h2><ol><li>打开GitHub或者码云个人设置</li><li>配置SSH公钥（点击怎样生成公钥）</li></ol><h2 id="5-把线上仓库的文件克隆到本地"><a href="#5-把线上仓库的文件克隆到本地" class="headerlink" title="5.把线上仓库的文件克隆到本地"></a>5.把线上仓库的文件克隆到本地</h2><ul><li><code>git clone "仓库的SSH地址"</code></li></ul><h2 id="6-脚手架创建vue项目"><a href="#6-脚手架创建vue项目" class="headerlink" title="6.脚手架创建vue项目"></a>6.脚手架创建vue项目</h2><h2 id="7-提交本地仓库文件到线上仓库"><a href="#7-提交本地仓库文件到线上仓库" class="headerlink" title="7.提交本地仓库文件到线上仓库"></a>7.提交本地仓库文件到线上仓库</h2><ul><li><code>git status</code></li><li><code>git add .</code></li><li><code>git commit -m "description"</code></li><li><code>git push</code></li><li><code>git pull</code> 把线上仓库代码拉到本地仓库</li></ul><h2 id="8-分支"><a href="#8-分支" class="headerlink" title="8.分支"></a>8.分支</h2><ul><li>查看当前分支:<code>git branch</code></li><li>切换分支:<code>git checkout "分支名"</code></li><li>合并分支:<code>git merge master</code>，把当前分支与指定的分支（这里是master）合并，当前分支指的是<code>git branch</code>命令输出的前面带有*号的分支</li></ul><h1 id="Git和GitHub团队合作"><a href="#Git和GitHub团队合作" class="headerlink" title="Git和GitHub团队合作"></a>Git和GitHub团队合作</h1><h2 id="1-负责人创建GitHub仓库"><a href="#1-负责人创建GitHub仓库" class="headerlink" title="1.负责人创建GitHub仓库"></a>1.负责人创建GitHub仓库</h2><h2 id="2-为团队成员授权"><a href="#2-为团队成员授权" class="headerlink" title="2.为团队成员授权"></a>2.为团队成员授权</h2><ul><li>点击<code>Setting-&gt;Collaborators</code>  </li><li>搜索成员GitHub账号或邮箱，点击Add collaborator,向其发送授权邀请</li><li>点击copy invite link ，将邀请链接发给好友，或该好友在其个人页面接受邀请就能够获得这个仓库的push权限啦。</li></ul><h2 id="3-代码同步"><a href="#3-代码同步" class="headerlink" title="3.代码同步"></a>3.代码同步</h2><ul><li>团队成员将仓库clone至本地你喜欢的位置</li><li>在该项目文件夹内修改项目内容后，比如新建了一个 hello.py，提交代码</li><li><code>git add .</code></li><li><code>git commit -m "description"</code></li><li><code>git push</code> 本地的仓库就会被推送到云端，上传到GitHub仓库。修改的内容也就一并上传了。</li><li>推送至云端后应该通知其他团队成员，其他团队成员将最新的云端数据下载下来，使用命令：<code>git pull</code> 将最新的修改同步到本地。</li></ul><p><img src="https://raw.githubusercontent.com/life-dog/blogImgs/master/img/HupuBBS_171124104511-1242822577.png" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Git教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+github搭建博客教程</title>
      <link href="/2020/03/07/bo-ke-jiao-cheng/"/>
      <url>/2020/03/07/bo-ke-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-github搭建"><a href="#Hexo-github搭建" class="headerlink" title="Hexo+github搭建"></a>Hexo+github搭建</h1><h2 id="1、安装node-js"><a href="#1、安装node-js" class="headerlink" title="1、安装node.js"></a>1、安装node.js</h2><p>因为hexo是用node生成的，基于node集成的，所以需要先安装node.js<br>1.1.检查node版本信息<br>node -v<br>1.2检查npm版本信息<br>npm -v</p><h2 id="2、安装hexo框架"><a href="#2、安装hexo框架" class="headerlink" title="2、安装hexo框架"></a>2、安装hexo框架</h2><p>2.1安装cnpm<br>(由于国内的镜像源安装比较慢，所以先利用npm安装淘宝的镜像源cnpm)<br>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>2.2检查cnpm版本信息<br>cnpm -v<br>2.3安装hexo<br>cnpm install -g hexo-cli<br>2.4检查hexo版本信息<br>hexo -v</p><h2 id="3、使用hexo搭建个人博客"><a href="#3、使用hexo搭建个人博客" class="headerlink" title="3、使用hexo搭建个人博客"></a>3、使用hexo搭建个人博客</h2><p>3.1在指定的位置新建一个文件夹blog<br>mkdir blog<br>3.2查看路径<br>pwd</p><p><img src="https://raw.githubusercontent.com/life-dog/blogImgs/master/img/clipboard.png" alt="img"></p><p>3.3使用hexo生成目录<br>hexo init</p><p><img src="https://raw.githubusercontent.com/life-dog/blogImgs/master/img/clipboard1.png" alt="img"></p><p>3.4查看该目录下生成了哪些东西<br>ls -l</p><p><img src="https://raw.githubusercontent.com/life-dog/blogImgs/master/img/clipboard2.png" alt="img"></p><p>3.5启动hexo<br>hexo s</p><p><img src="https://raw.githubusercontent.com/life-dog/blogImgs/master/img/start.png" alt="img"></p><p>3.6新建一篇文章<br>hexo n “my article”</p><p><img src="https://raw.githubusercontent.com/life-dog/blogImgs/master/img/newFiles.png" alt="img"></p><p>3.7进入到_posts/目录用vim编辑文章<br>vim 我的第一篇博客.md<br>3.8清除一下hexo<br>hexo clean</p><p><img src="https://raw.githubusercontent.com/life-dog/blogImgs/master/img/clipboard13.png" alt="img"></p><p>3.9重新生成hexo<br>hexo g</p><p><img src="https://raw.githubusercontent.com/life-dog/blogImgs/master/img/general.png" alt="img"></p><p>3.10 重新启动hexo<br>hexo s</p><h2 id="4、部署到Github上面"><a href="#4、部署到Github上面" class="headerlink" title="4、部署到Github上面"></a>4、部署到Github上面</h2><p>4.1新建一个仓库<br>仓库命名一定要符合要求才行，github用户名.github.io</p><p><img src="https://raw.githubusercontent.com/life-dog/blogImgs/master/img/clipboard4.png" alt="img"></p><p>4.2安装git的部署插件<br>cnpm install –save hexo-deployer-git</p><p><img src="https://raw.githubusercontent.com/life-dog/blogImgs/master/img/clipboard5.png" alt="img"></p><p>4.3设置_config.yml文件</p><p><img src="https://raw.githubusercontent.com/life-dog/blogImgs/master/img/clipboard6.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/life-dog/blogImgs/master/img/clipboard7.png" alt="img"></p><p>4.4部署到远端<br>hexo d</p><p><img src="https://raw.githubusercontent.com/life-dog/blogImgs/master/img/clipboard8.png" alt="img"></p><h2 id="5、更换博客主题"><a href="#5、更换博客主题" class="headerlink" title="5、更换博客主题"></a>5、更换博客主题</h2><p>5.1主题地址<br>github.com/litten/hexo-theme-yilia</p><p>5.2下载主题<br>git clone <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="noopener">https://github.com/litten/hexo-theme-yilia.git</a> themes/yilia</p><p><img src="https://raw.githubusercontent.com/life-dog/blogImgs/master/img/clipboard9.png" alt="img"></p><p>5.3进入到themes目录</p><p><img src="https://raw.githubusercontent.com/life-dog/blogImgs/master/img/clipboard10.png" alt="img"></p><p>5.4回到上一层配置_config.yml文件</p><p><img src="https://raw.githubusercontent.com/life-dog/blogImgs/master/img/clipboard11.png" alt="img"></p><p>5.5clean一下hexo<br>hexo clean<br>5.6重新生成hexo<br>hexo g<br>5.7启动hexo<br>hexo s<br>5.8推送到远端<br>hexo d</p><p><img src="https://raw.githubusercontent.com/life-dog/blogImgs/master/img/clipboard12.png" alt="img"></p><h2 id="个人博客网站"><a href="#个人博客网站" class="headerlink" title="个人博客网站"></a>个人博客网站</h2><p><a href="https://life-dog.github.io/">https://life-dog.github.io/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
